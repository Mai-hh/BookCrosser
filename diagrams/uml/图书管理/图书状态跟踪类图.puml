@startuml
class BookStatusActivity {
    - bookStatusFragment: BookStatusFragment
    - bookStatusViewModel: BookStatusViewModel
}

class BookStatusFragment {
    - bookStatusViewModel: BookStatusViewModel
}

class BookStatusViewModel {
    - bookService: BookService
    - driftingService: DriftingService
}

interface BookService {
    + getBookById(bookId: Long): Book
}

class BookServiceImpl {
    - bookRepository: BookRepository
}

interface DriftingService {
    + getDriftingByBookId(bookId: Long): Drifting
    + startDrifting(bookId: Long, userId: Long): Drifting
    + confirmReceived(bookId: Long): Drifting
}

class DriftingServiceImpl {
    - driftingRepository: DriftingRepository
}

interface BookRepository {
    + findById(bookId: Long): Book
}

class BookRepositoryImpl

interface DriftingRepository {
    + findByBookId(bookId: Long): Drifting
    + save(drifting: Drifting): Drifting
    + updateStatus(bookId: Long, status: String): Drifting
}

class DriftingRepositoryImpl

class Book

class Drifting {
    - status: String
    - initiatorId: Long
    - receiverId: Long
}

BookStatusActivity *-- BookStatusFragment
BookStatusActivity *-- BookStatusViewModel
BookStatusFragment --> BookStatusViewModel
BookStatusViewModel --> BookService
BookStatusViewModel --> DriftingService
BookServiceImpl ..|> BookService
BookServiceImpl --> BookRepository
DriftingServiceImpl ..|> DriftingService
DriftingServiceImpl --> DriftingRepository
BookRepositoryImpl ..|> BookRepository
DriftingRepositoryImpl ..|> DriftingRepository
BookRepositoryImpl --> Book
DriftingRepositoryImpl --> Drifting
Drifting -> Book
@enduml